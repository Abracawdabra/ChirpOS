/**
 * ChirpOS - Logging Module
 * @author Cawdabra
 * @license MIT
 */
"use strict";

// Namespace
var log = {};

/**
 * Logger levels
 * @enum
 */
log.LogLevel = {
    ERROR: 0,
    WARN: 1,
    INFO: 2,
    DEBUG: 3
};

/**
 * A function that adds a simple logger method to objects (requires _kernel property)
 * NOTE: This makes it so that the logger instance is consistent across all objects
 * @param {Object} object
 */
log.addLoggerMethod = function(obj) {
    obj.logger = function() {
        if (this.loggerInstance instanceof log.Logger) {
            // It has a logger instance (probably the kernel)
            return this.loggerInstance;
        }
        else if (this._kernel.loggerInstance instanceof log.Logger) {
            // Use the kernel's logger
            return this._kernel.loggerInstance;
        }
        else {
            throw new Error("No logger defined");
        }
    }
};

/**
 * Logger class
 * @class
 * @param {LogLevel} level
 */
log.Logger = function(level) {
    this.level = level;
};

/**
 * Main print method
 * @param {LogLevel} level
 * @param {string} param2 Name of object, or message if param3 is a string
 * @param {string} [param3] Message of object
 */
log.Logger.prototype.print = function(level, param2, param3) {
    if (this.level < level) {
        return;
    }

    var log_level_str;
    switch (level) {
        case log.LogLevel.ERROR:
            log_level_str = "ERROR";
            break;
        case log.LogLevel.WARN:
            log_level_str = "WARN";
            break;
        case log.LogLevel.INFO:
            log_level_str = "INFO";
            break;
        case log.LogLevel.DEBUG:
            log_level_str = "DEBUG";
            break;
        default:
            log_level_str = "LOG";
    }

    if (typeof param3 === "string") {
        console.log("[" + log_level_str + "](" + param2 + "): " + param3);
    }
    else {
        console.log("[" + log_level_str + "]: " + param2);
    }
};

/**
 * Error level message
 * @param {string} param1 Name of object, or message if param2 is a string
 * @param {string} param2 Message
 */
log.Logger.prototype.error = function(param1, param2) {
    this.print(log.LogLevel.ERROR, param1, param2);
};

/**
 * Warn level message
 * @param {string} param1 Name of object, or message if param2 is a string
 * @param {string} param2 Message
 */
log.Logger.prototype.warn = function(param1, param2) {
    this.print(log.LogLevel.WARN, param1, param2);
};

/**
 * Info level message
 * @param {string} param1 Name of object, or message if param2 is a string
 * @param {string} param2 Message
 */
log.Logger.prototype.info = function(param1, param2) {
    this.print(log.LogLevel.INFO, param1, param2);
}

/**
 * Debug level message
 * @param {string} param1 Name of object, or message if param2 is a string
 * @param {string} param2 Message
 */
log.Logger.prototype.debug = function(param1, param2) {
    this.print(log.LogLevel.DEBUG, param1, param2);
};

module.exports = log;
